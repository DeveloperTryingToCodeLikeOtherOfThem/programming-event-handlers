{"entries":[{"timestamp":1756780480760,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":236,"length1":45,"diffs":[[1,"    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1756781233104,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":12,"diffs":[[1,""]]}]}]},{"timestamp":1756781263071,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":708,"diffs":[[1,"namespace mp"]]}]}]},{"timestamp":1756781811930,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":19,"diffs":[[1,""]]},{"start1":28,"length1":1403,"diffs":[[1,"  let _pressed = false\r\n  \r\n   export function onEvent (src: number, value: number, handler: () => void, flags?: number) {\r\n       control.internalOnEvent(src, value, handler)\r\n       if(flags) \r\n        control.internalOnEvent(src, value, handler, flags)\r\n   }\r\n"]]},{"start1":293,"length1":0,"diffs":[[1,"   export function isPressed () {\r\n       return _pressed;\r\n   }\r\n\r\n   export function buttonEvent (button: ControllerButton, event: ControllerButtonEvent, handler: () => void) {\r\n       onEvent(0, button, handler, 0)\r\n   }\r\n\r\n   export function warning (warning: any) {\r\n       throw warning\r\n   }\r\n}\r\n \r\nprogramControl.buttonEvent(ControllerButton.A, ControllerButtonEvent.Pressed, () => {\r\n    game.over()\r\n})\r\n "]]}]}]},{"timestamp":1756782407222,"editorVersion":"2.0.56","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":30,"diffs":[[1,""]]},{"start1":130,"length1":146,"diffs":[[1,"     * control event field \r\n"]]},{"start1":1326,"length1":31,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":175,"length1":86,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":204,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"},{"type":"added","filename":"main.blocks","value":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"}]}],"snapshots":[{"timestamp":1756780480759,"editorVersion":"2.0.56","text":{"main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"time to update the on update\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\",\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1756782281203,"editorVersion":"2.0.56","text":{"main.ts":"//% advanced=true\r\nnamespace programControl {\r\n    // not used for the extension it is broken\r\n    let _pressed = false\r\n    /**\r\n     * control event field \r\n     */\r\n    //% blockId=\"on_event\" block=\"on event %src %value || %flags\"\r\n    export function onEvent(src: number, value: number, handler: () => void, flags?: number) {\r\n        control.internalOnEvent(src, value, handler)\r\n        if (flags)\r\n            control.internalOnEvent(src, value, handler, flags)\r\n    }\r\n    // this function is broken for now sorry.\r\n    function isPressed() {\r\n        return _pressed;\r\n    }\r\n     //% blockId=\"button event\" block=\"%button %event\"\r\n    export function buttonEvent(button: ControllerButton, event: ControllerButtonEvent, handler: () => void) {\r\n        onEvent(0, button, handler, 0)\r\n    }\r\n    // this block is private because it is a advanced used block not meant for beginners even advanced must be a dev and understand with permission before using it.\r\n    export function _warning(warning: any) {\r\n        throw warning\r\n    }\r\n\r\n    export function _setUserEventsEnabled() {\r\n        controller._setUserEventsEnabled()\r\n    }\r\n}\r\n\r\n// programControl.buttonEvent(ControllerButton.A, ControllerButtonEvent.Pressed, () => {\r\n//     game.over()\r\n// })\r\n\r\n","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"time to update the on update\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"languageRestriction\": \"javascript-only\"\n}\n"}}],"shares":[],"lastSaveTime":1756782706069}